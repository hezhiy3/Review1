This is a review of what I have learned about Python.
I will organize my knowledge in the following structure:
Symbols--Name--Role(what for).

  print -- print -- Output
  
  #     -- octothorpe \ pound \ hash \ mesh ... -- Make comments

  +     -- plus  -- Do mathematics plus

  -     -- minus -- Do mathematics minus

  /     -- slash -- Do mathematics divide

  *     -- asterisk -- Do mathematics multiply

  %     -- percent  -- Get remaining part after division; format character

  <     -- less-than -- Do comparison

  >     -- greater-than -- Do comparison

  <=    -- less-than-equal -- Do comparison

  >=    -- greater-than-equal -- Do comparison

  =     -- equals -- Assign a value to a variable; Do mathematics equation

  _     -- underscore -- Put an imaginary space between words in variable names

  ==    -- double-equal -- Test if two things have the same value

  d     -- string formatting conversion type -- Signed integer decimal

  i     -- string formatting conversion type -- Signed integer decimal

  o     -- string formatting conversion type -- Signed octal value

  u     -- string formatting conversion type -- (Obsolete type)It is identical to 'd'

  x     -- string formatting conversion type -- Signed hexadecimal (lowercase)

  X     -- string formatting conversion type -- Signed hexadecimal (uppercase)

  e     -- string formatting conversion type -- Floating point exponential format (lowercase)

  E     -- string formatting conversion type -- Floating point exponential format (uppercase)

  f     -- string formatting conversion type -- Floating point decimal format

  F     -- string formatting conversion type -- Floating point decimal format

  g     -- string formatting conversion type -- Floating point format.Uses lowercase exponential format 
                                                if exponent is less than -4 or not less than precision, decimal format otherwise

  G     -- string formatting conversion type -- Floating point format.Uses uppercase exponential format 
                                                if exponent is less than -4 or not less than precision, decimal format otherwise

  c     -- string formatting conversion type -- Single character (accepts integer or single character string)

  r     -- string formatting conversion type -- String (converts any Python object using repr())

  s     -- string formatting conversion type -- String (converts any Python object using str())

  %     -- string formatting conversion type -- No argument is converted, results in a '%' character in the result

  \     -- backslash -- Escape character

  \\    -- escape sequence -- Backslash (\)

  \'    -- escape sequence -- Single quote (')

  \"    -- escape sequence -- Double quote (")

  \a    -- escape sequence -- ASCII Bell (BEL)

  \b    -- escape sequence -- ASCII Backspace (BS)

  \f    -- escape sequence -- ASCII Formfeed (FF)

  \n    -- escape sequence -- ASCII Linefeed (LF)

  \r    -- escape sequence -- ASCII Carriage Return (CR)

  \t    -- escape sequence -- ASCII Horizontal Tab (TAB)

  \v    -- escape sequence -- ASCII Vertical Tab (VT)

  \ooo  -- escape sequence -- ASCII character with octal value ooo

  \xhh  -- escape sequence -- ASCII character with hex value hh...

  \N{name} -- escape sequence --Character named name in the Unicode database (Unicode only)

  \uxxxx  -- escape sequence -- Character with 16-bit hex value xxxx (Unicode only)

  \Uxxxxxxxx -- escape sequence -- Character with 32-bit hex value xxxxxxxx (Unicode only)

  """ """ -- triple double quotes -- Works like a string,but can put unlimited lines of text in it

  raw_input() -- built-in function -- Reads a line from input, coverts it to a string (stripping a trailing newline)

  import -- import -- Adds modules to your script

  argv  -- argument variable -- Holds the variables you pass to Python script

  open() -- built-in function -- Open a file

  read() -- file method -- Read a file, returned as a string

  .      -- (not known yet) -- Give a file a command by using the ".", the name of the command, and parameters

  close() -- file method  -- Close the file

  readline -- file method -- Reads just one line of a text file

  truncate() -- file method -- Empties the file

  write() -- file method -- Writes stuff to the file

  exists() -- operating system command -- Returns True if a file exists, based on its name in a string as an argument. It returns False if not.

  len() -- built-in function -- Gets the length of the string that you pass to it and returns that as a number

  def   -- built-in statement -- Make functions

  *args -- asterisk args -- Pass parameters to your function

  :     -- colon -- Ends a def statement, and start indenting

  seek() -- file method -- Set position of the read/write pointer in a file 

  +=    -- (shorthand notation) -- Contraction of mathematic operators

  return -- built-in function -- Return anything you can put to the right side of "="

  